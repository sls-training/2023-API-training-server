openapi: 3.1.0

info:
  title: シンプルなオンラインストレージサービス提供用API
  description: 本APIは、APIとはなにか、どのようにして作成するのかを学ぶためのものである。
  termsOfService: http://localhost:{PORT}/
  version: 0.0.0

components:
  schemas:
    userProperties:
      type: object:
      properties:
        id:
          description: ユーザのIDである。
          type: string
          format: uuid
        name:
          $ref: '#/components/schemas/userName'
        email:
          $ref: '#/components/schemas/userEmail'
      required:
        - id
        - name
        - email
    userName:
      description: ユーザの表示名である。一意である必要はない。
      type: string
      minimum: 1
      maximum: 64
      examples:
        ieyasu:
          summary: 日本語名
          value: 徳川家康
        washington:
          summary: 英語名
          value: George Washington
        anthony:
          summary: ハンドルネーム
          value: ad
    userEmail:
      description: ユーザを識別するメールアドレスである。一意である必要がある。
      type: string
      format: email
      examples:
        gmail:
          summary: Gmailのメールアドレスの例
          value: foo.bar@gmail.com
    userPassword:
      description: 作成するユーザを認証するパスワードである。
      type: string
      format: password
      minimum: 16
      maximum: 128
      examples:
        naive_password:
          summary: 単純なパスワード
          value: abcdefghijklmnop
    fileProperties:
      type: object
      properties:
        id:
          description: ファイルのID
          type: string
          format: uuid
        name:
          $ref: '#/components/schemas/fileName'
        description:
          $ref: '#/components/schemas/fileDescription'
        size:
          description: ファイルの容量
          type: integer
          format: int64
        created_at:
          description: ファイルをアップロードした日時
          type: string
          format: date-time
        changed_at:
          description: ファイルの最終更新日時
          type: string
          format: date-time
      required:
        - id
        - name
        - size
        - created_at
        - changed_at
    fileName:
      description: |
        ファイルの表示名を表す。

        この値は、同一のユーザがアップロードしたファイル間で一意である必要がある。
        ファイルのアップロードやメタデータの更新時に重複した値を指定した場合は、値の不備を理由にエラーレスポンスを返す。

        ファイルアップロード時にこの値を省略した場合は、アップロードされたファイルのファイル名が指定されたものとして処理される。
        その際、アップロード済みである他のファイルのファイル名と重複していた場合は `(1)` 、 `(2)` のようにバージョニングされたファイル名になる。
        なお、アップロード済みである他のファイルのファイル名は変更されない。
      type: string
      minLength: 1
      maxLength: 128
    fileDescription:
      description: |
        ファイルの説明文である。

        任意の属性であるため、ファイルアップロード時に省略された場合は存在しない値として扱われる。
        その場合、例えば、ファイルアップロード時などのレスポンスに含まれるファイルのメタデータには、この値を表すフィールドないし値は含まれない。
      type: string
      minLength: 0
      maxLength: 1024
    file:
      description: ファイル自身のバイナリ
      type: string
      contentMediaType: application/octet-stream
      contentEncoding: binary
      minimum: 0
      # 上限を緩和して、代わりにアップロード可能なファイル全体のファイルサイズの総量に制限を設定することも考えられる。
      # ここでは簡単化のためにこの制限は設定しないこととする。
      #
      # 1048576 = 2^10^2 = 1MB
      maximum: 1048576
    error:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/problemDetailsStatus'
        title:
          $ref: '#/components/schemas/problemDetailsTitle'
        errors:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: エラーが発生した対象の名前が格納される。
              message:
                type: string
                description: 発生したエラーの詳細が格納される。
            required:
              - name
              - reason
            description: 発生した1つのエラーに関する情報が格納される。
          description: 同時に発生したエラー全ての情報が格納される。
      required:
        - status
        - errors
    problemDetailsStatus:
      type: integer
      description: |
        エラー発生時のHTTPステータスと同じ値になる。

        https://datatracker.ietf.org/doc/html/rfc7807#section-3.1
    problemDetailsTitle:
      type: string
      description: |
        エラーに関する対人可読な短い説明文が格納される。

        https://datatracker.ietf.org/doc/html/rfc7807#section-3.1
    problemDetailsDetail:
      type: string
      description: |
        エラーに関する対人可読な説明文が格納される。

        https://datatracker.ietf.org/doc/html/rfc7807#section-3.1
    problemDetailsInstance:
      type: string
      format: uri-reference
      description: |
        エラーが発生したリソースへの相対URIが格納される。

        https://datatracker.ietf.org/doc/html/rfc7807#section-3.1
  responses:
    notFound:
      description: リソースが存在しないことを意味する。
      content:
        application/problem+json:
          schema:
            description: |
              https://datatracker.ietf.org/doc/html/rfc7807
              https://datatracker.ietf.org/doc/html/rfc6749#section-7.2
              https://datatracker.ietf.org/doc/html/rfc6750#section-3.1
            type: object
            properties:
              status:
                $ref: '#/components/schemas/problemDetailsStatus'
              title:
                $ref: '#/components/schemas/problemDetailsTitle'
              instance:
                $ref: '#/components/schemas/problemDetailsInstance'
            required:
              - status
              - title
              - instance
    unprocessableEntity:
      description: パラメータのバリデーションエラーが発生したことを意味する。
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          examples:
            patch_files_fileId_validation_errors:
              summary: ファイルのメタデータの更新時にいくつかのバリデーションが発生した。
              value:
                {
                  "status": 422,
                  "title": "Some validation errors for the file",
                  "errors": [
                    { "name": "description", "reason": "Too long" },
                    { "name": "size", "reason": "Too large" }
                  ]
                }
            post_users_empty_name:
              summary: ユーザの表示名が空白である。
              value:
                {
                  "status": 422,
                  "title": "Validation error for user",
                  "errors": [
                    { "name": "name", "reason": "The name is empty." }
                  ]
                }
            post_users_invalid_email:
              summary: メールアドレスが不正な形式である。
              value:
                {
                  "status": 422,
                  "title": "Validation error for user",
                  "errors": [
                    { "name": "email", "reason": "The email has an invalid form." }
                  ]
                  }
            post_users_not_unique_email:
              summary: 同じメールアドレスが既に登録されている。
              value:
                {
                  "status": 422,
                  "title": "Validation error for user",
                  "errors": [
                    { "name": "email", "reason": "The email has already been registered." }
                  ]
                }
            post_users_too_short_password:
              summary: パスワードが短すぎる。
              value:
                {
                  "status": 422,
                  "title": "Validation error for user",
                  "errors": [
                    { "name": "password", "reason": "The password is too short." }
                  ]
                }
    bearerBadRequest:
      description: 必須パラメータの不足、サポートされていないパラメータ名や値、重複したパラメータ名、複数ないし正しくない認証方法の利用を意味する。
      content:
        application/problem+json:
          schema:
            description: |
              https://datatracker.ietf.org/doc/html/rfc7807
              https://datatracker.ietf.org/doc/html/rfc6749#section-7.2
              https://datatracker.ietf.org/doc/html/rfc6750#section-3.1
            type: object
            properties:
              status:
                $ref: '#/components/schemas/problemDetailsStatus'
              title:
                $ref: '#/components/schemas/problemDetailsTitle'
              error:
                type: string
                enum:
                  - invalid_request
                description: エラー内容を示すエラーコードが格納される。
            required:
              - status
              - title
              - error
            examples:
              missing_required_parameters:
                summary: 必須パラメータが不足している。
                value:
                  {
                    "status": 400,
                    "title": "Missing required parameters",
                    "error": "invalid_request"
                  }
    bearerUnauthorized:
      description: |
        アクセストークンがない、あるいは失効や有効期限切れなどによる有効でないアクセストークンによるアクセスを意味する。

        なお、トークンがない場合や認証方式が誤っている場合は、レスポンスボディには何も含まれないことに注意する。
        この仕様は [3.1. Error Codes | OAuth 2.0 Bearer Token Usage](https://datatracker.ietf.org/doc/html/rfc6750#section-3.1) で推奨されている。
      content:
        application/problem+json:
          schema:
            description: |
              https://datatracker.ietf.org/doc/html/rfc7807
              https://datatracker.ietf.org/doc/html/rfc6749#section-7.2
              https://datatracker.ietf.org/doc/html/rfc6750#section-3.1
            type: object
            properties:
              status:
                $ref: '#/components/schemas/problemDetailsStatus'
              title:
                $ref: '#/components/schemas/problemDetailsTitle'
              error:
                type: string
                enum:
                  - invalid_token
                description: エラー内容を示すエラーコードが格納される。
            required:
              - status
              - title
              - error
          examples:
            invalid_token:
              summary: 不正なトークンによるアクセスを試みた場合。
              value:
                {
                  "status": 401,
                  "title": "An access with an invalid access token",
                  "error": "invalid_token"
                }
    bearerForbidden:
      description: 送信したアクセストークンの権限の不足を意味する。
      content:
        application/problem+json:
          schema:
            description: |
              https://datatracker.ietf.org/doc/html/rfc7807
              https://datatracker.ietf.org/doc/html/rfc6749#section-7.2
              https://datatracker.ietf.org/doc/html/rfc6750#section-3.1
            type: object
            properties:
              status:
                $ref: '#/components/schemas/problemDetailsStatus'
              title:
                $ref: '#/components/schemas/problemDetailsTitle'
              error:
                type: string
                enum:
                  - insufficient_scope
                description: エラー内容を示すエラーコードが格納される。
              scope:
                type: string
                description: 保護されたリソースへのアクセスに必要なスコープが格納される。
            required:
              - status
              - title
              - error
              - scope
          examples:
            insufficient_scope:
              summary: アクセストークンの権限が不足している場合。
              value:
                {
                  "status": 403,
                  "title": "The access token only has insufficient scopes",
                  "error": "insufficient_scope",
                  "scope": "write"
                }
  parameters:
    fileId:
      name: fileId
      in: path
      required: true
  securitySchemes:
    bearer:
      type: http
      scheme: bearer

paths:
  /signin:
    post:
      summary: 認証したユーザにアクセストークンを発行する。
      description: OAuth2.0のResource Owner Password Credential grant方式で、かつクライアント認証なしでのアクセストークンの発行を行う。
      operationId: LoginUser
      requestBody:
        description: |
          OAuth2.0のResource Owner Password Credential grant方式によるアクセストークンリクエスト時に必要となるパラメータを格納する。
          なお、UTF-8でエンコードされている必要がある。

          https://datatracker.ietf.org/doc/html/rfc6749#section-4.3.2
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum:
                    - password
                  description: 認可サーバに要求するグラントのタイプである。ここではResource Owner Password Credential grant方式を利用するため、値は `password` である必要がある。
                username:
                  type: string
                  description: アクセストークンの要求に利用するリソースオーナーのユーザ名である。
                password:
                  type: string
                  description: アクセストークンの要求に利用するリソースオーナーのパスワードである。
                scope:
                  type: string
                  description: 要求するアクセストークンのスコープである。
              required:
                - grant_type
                - username
                - password
        required: true
      responses:
        '200':
          description: |
            ログインに成功してアクセストークンが発行されたことを意味する。

            https://datatracker.ietf.org/doc/html/rfc6749#section-5.1
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: 認可サーバから発行されたアクセストークンである。
                  token_type:
                    type: string
                    description: 発行されたアクセストークンの種類である。トークンをどのようにして利用するかを示す。
                  expires_in:
                    type: integer
                    format: int64
                    description: アクセストークンが発行されてから失効するまでの有効期間を示す。単位は秒である。
                  scope:
                    type: string
                    description: 発行されたアクセストークンのスコープを示す。省略されている場合は、リクエストしたスコープと同じであることを意味する。
                required:
                  - access_token
                  - token_type
              examples:
                successful_login:
                  summary: ログインに成功してアクセストークンが発行された
                  value:
                    {
                      "access_token": "zNxoOIF7F9FEifI2",
                      "token_type": "bearer",
                      "expires_in": 3600
                    }
        '400':
          description: |
            ログインに失敗してアクセストークンが発行されなかったことを意味する。

            https://datatracker.ietf.org/doc/html/rfc6749#section-5.2
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/problemDetailsStatus'
                  title:
                    $ref: '#/components/schemas/problemDetailsTitle'
                  detail:
                    # NOTE: 役割としては https://datatracker.ietf.org/doc/html/rfc6749#section-5.2 に定義されている任意のフィールドである `error_description` と同様である。
                    # 場合によっては、互換性のために値は `detail` フィールドと同値である `error_description` フィールドを追加する必要があるかもしれない。
                    $ref: '#/components/schemas/problemDetailsDetail'
                  error:
                    type: string
                    enum:
                      - invalid_request
                      - invalid_grant
                      - unsupported_grant_type
                      - invalid_scope
                    description: 失敗した理由を示すエラーコードである。
                required:
                  - status
                  - title
                  - error
  /signout:
    post:
      summary: 発行したアクセストークンを失効させる。
      operationId: LogoutUser
      requestBody:
        description: https://datatracker.ietf.org/doc/html/rfc7009#section-2.1
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: クライアントが失効させたいトークン
                token_type_hint:
                  type: string
                  enum:
                    - access_token
                  description: 失効させたいトークンの種類を示す。サーバ上でトークンを検索する際に利用される補助情報であり、最終的にサーバ上でトークンを発見できるかには影響を与えない。
              required:
                - token
      responses:
        '200':
          description: トークンの失効に成功したことを示す。また、不正なトークンを送信した場合もこのレスポンスを返す。
        '400':
          description: |
            トークンの失効に失敗したことを意味する。

            https://datatracker.ietf.org/doc/html/rfc7009#section-2.2.1

            上記のURI先に記載されているエラーコードのうち、ここではサポートしていないものがある。
            これは以下のような理由による。

            - クライアント登録もクライアント認証もないので、クライアント関連のエラーは発生しない。
            - トークンしか送信しないのでグラント関連のエラーは発生しない。
            - アクセストークンのみを発行かつアクセストークンの失効をサポートしている都合上、サポートしていないタイプのトークンの送信が発生しないので、トークンタイプ関連のエラーは発生しない。

            よって、これらの前提が変更されれば、ここでサポートされるエラーコードも変更される必要がある。
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/problemDetailsStatus'
                  title:
                    $ref: '#/components/schemas/problemDetailsTitle'
                  detail:
                    # NOTE: 役割としては https://datatracker.ietf.org/doc/html/rfc6749#section-5.2 に定義されている任意のフィールドである `error_description` と同様である。
                    # 場合によっては、互換性のために値は `detail` フィールドと同値である `error_description` フィールドを追加する必要があるかもしれない。
                    $ref: '#/components/schemas/problemDetailsDetail'
                  error:
                    type: string
                    enum:
                      - invalid_request
                    description: 失敗した理由を示すエラーコードである。
                required:
                  - status
                  - title
                  - error
  /files:
    get:
      summary: ユーザがアップロードしたファイル一覧を返す。
      description: 送信されたアクセストークンを発行されたユーザがアップロードしたファイルの一覧を返す。
      operationId: GetFiles
      parameters:
        - name: page
          in: query
          description: 要求するページ番号を指定する。
          schema:
            type: integer
            format: int64
            default: 1
        - name: per
          in: query
          description: 1ページに含めるファイルの情報の総数を指定する。ただし、特に最終ページについては、必ずしもこのパラメータで指定した数のファイルの情報が含まれるとは限らない。
          schema:
            type: integer
            format: int64
            default: 20
        - name: order
          in: query
          description: 返すファイル情報の並びを決定する際の順序を指定する。
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
        - name: orderby
          in: query
          description: 返すファイル情報をどのような基準で並べるか指定する。
          schema:
            type: string
            enum:
              - id
              - name
              - description
              - size
              - created_at
              - changed_at
            default: created_at
      responses:
        '200':
          description: ユーザがアップロードしたファイル一覧の取得に成功したことを意味する。
          headers:
            link:
              description: |
                ページネーション用のリンクを格納する。

                この値の仕様はGitHubのREST APIにおけるページネーションと同様である。
                https://docs.github.com/en/rest/guides/using-pagination-in-the-rest-api?apiVersion=2022-11-28#using-link-headers
              schema:
                type: string
              examples:
                on_first_page:
                  summary: 先頭ページを返す場合。
                  value: link: <http://localhost:<PORT>/files?page=2>; rel="next", <http://localhost:<PORT>/files?page=7>; rel="last", <http://localhost:<PORT>/files?page=1>; rel="first"
                on_middle_page:
                  summary: 中間ページを返す場合。
                  value: link: <http://localhost:<PORT>/files?page=2>; rel="prev", <http://localhost:<PORT>/files?page=4>; rel="next", <http://localhost:<PORT>/files?page=7>; rel="last", <http://localhost:<PORT>/files?page=1>; rel="first"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/fileProperties'
              examples:
                files:
                  summary: サンプルファイル群
                  value:
                    [
                      {
                        "id": "76DA18B4-7CF0-48C1-A33D-2FFA0A4B345A",
                        "name": "sample01.txt",
                        "description": "My diary",
                        "size": 1024,
                        "created_at": "2020-10-12T11:20:44+00:00",
                        "changed_at": "2023-05-25T23:07:39+00:00"
                      },
                      {
                        "id": "9BD3BEA3-67E7-401A-9A45-C6CAB38A052A",
                        "name": "sample02.png",
                        "size": 1048576,
                        "created_at": "2020-10-12T11:10:30+00:00",
                        "changed_at": "2020-10-12T11:10:30+00:00"
                      }
                    ]
        '400':
          $ref: '#/components/responses/bearerBadRequest'
        '401':
          $ref: '#/components/responses/bearerUnauthorized'
        '403':
          $ref: '#/components/responses/bearerForbidden'
      security:
        - bearer: []
    post:
      summary: 新しいファイルをアップロードする
      operationId: UploadFile
      requestBody:
        description: アップロードする新しいファイルやそのメタデータを格納する。
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/fileName'
                description:
                  $ref: '#/components/schemas/fileDescription'
                file:
                  $ref: '#/components/schemas/file'
              required:
                - file
        required: true
      responses:
        '201':
          description: ファイルのアップロードに成功したことを意味する。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fileProperties'
        '400':
          $ref: '#/components/responses/bearerBadRequest'
        '401':
          $ref: '#/components/responses/bearerUnauthorized'
        '403':
          $ref: '#/components/responses/bearerForbidden'
        '422':
          $ref: '#/components/responses/unprocessableEntity'
      security:
        - bearer: []
  /files/{fileId}:
    patch:
      summary: ファイルの情報を更新する
      operationId: PatchFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: 必須パラメータ自体は存在しないが、パラメータがない場合はパラメータの不備を理由に400(Bad Request)を返す。
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/fileName'
                description:
                  $ref: '#/components/schemas/fileDescription'
                file:
                  $ref: '#/components/schemas/file'
      responses:
        '200':
          description: ファイルの更新に成功したことを意味する。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fileProperties'
        '400':
          $ref: '#/components/responses/bearerBadRequest'
        '401':
          $ref: '#/components/responses/bearerUnauthorized'
        '403':
          $ref: '#/components/responses/bearerForbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '422':
          $ref: '#/components/responses/unprocessableEntity'
      security:
        - bearer: []
    delete:
      summary: アップロードされているファイルを削除する
      operationId: DeleteFile
      responses:
        '204':
          description: ファイルの削除に成功したことを意味する。
        '400':
          $ref: '#/components/responses/bearerBadRequest'
        '401':
          $ref: '#/components/responses/bearerUnauthorized'
        '403':
          $ref: '#/components/responses/bearerForbidden'
        '404':
          $ref: '#/components/responses/notFound'
      security:
        - bearer: []
    parameters:
      - $ref: "#/components/parameters/fileId"
  /files/{fileId}/properties:
    get:
      summary: ファイル名やその説明文などファイルの情報を返す
      operationId: GetFileProperties
        '200':
          description: ファイルの情報の取得に成功したことを意味する。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fileProperties'
        '400':
          $ref: '#/components/responses/bearerBadRequest'
        '401':
          $ref: '#/components/responses/bearerUnauthorized'
        '403':
          $ref: '#/components/responses/bearerForbidden'
        '404':
          $ref: '#/components/responses/notFound'
      security:
        - bearer: []
    parameters:
      - $ref: "#/components/parameters/fileId"
  /files/{fileId}/content:
    get:
      summary: ファイル自身を返す
      operationId: GetFileContent
      responses:
        '200':
          description: ファイルのバイナリを取得に成功したことを意味する。
          content:
            application/octet-stream: {}
        '400':
          $ref: '#/components/responses/bearerBadRequest'
        '401':
          $ref: '#/components/responses/bearerUnauthorized'
        '403':
          $ref: '#/components/responses/bearerForbidden'
        '404':
          $ref: '#/components/responses/notFound'
      security:
        - bearer: []
    parameters:
      - $ref: "#/components/parameters/fileId"
  /user:
    get:
      summary: 提供されたトークンに対応するユーザの情報を返す。
      operationId: GetUser
      responses:
        '200':
          description: ユーザ情報の取得に成功したことを示す。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userProperties'
        '400':
          $ref: '#/components/responses/bearerBadRequest'
        '401':
          $ref: '#/components/responses/bearerUnauthorized'
        '403':
          $ref: '#/components/responses/bearerForbidden'
      security:
        - bearer: []
    post:
      summary: 新しいユーザを作成する
      operationId: CreateUser
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/userName'
                email:
                  $ref: '#/components/schemas/userEmail'
                password:
                  $ref: '#/components/schemas/userPassword'
              requires:
                - name
                - email
                - password
      responses:
        '201':
          description: ユーザ作成に成功したことを意味する。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userProperties'
        '422':
          $ref: '#/components/responses/unprocessableEntity'
    patch:
      summary: 現在自分がログインしているユーザの情報を更新する
    delete:
      summary: 現在自分がログインしているユーザの情報を削除する
